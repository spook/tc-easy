#!/usr/bin/perl -w
use strict;
use Getopt::Long;
use Pod::Usage;

$| = 1;

# Parse CLI
my $opts = {};
GetOptions($opts, "help|h", "test|t", "verbose|v+") 
    or pod2usage(-verbose => 0);
pod2usage(-verbose => 99, -sections => "NAME|SYNOPSIS|DESCRIPTION|COPYRIGHT")
    if $opts->{help};
my $bw = $ARGV[0] || 0;
my $lt = $ARGV[1] || 0;
my $jt = $ARGV[2] || 0;
my $if = $ARGV[3] || q{};

# Determine the interface
if (!$if) {
    my @ifs = grep {/scope global (\S+)/ && ($_ = $1)} qx(ip addr show);
    die "*** Cannot find interface\n" if !@ifs;
    $if = $ifs[0];    # take first
}
print "Interface $if\n" if $opts->{verbose};

# Build the commands
my @cmds = ("tc qdisc del dev $if root");
if ($bw && !$lt  && !$jt) {
    # Bandwidth only
    #   Note - the latency in the command is maximum for packet gathering,
    #   not the latency we would want to add.
    push @cmds, "tc qdisc add dev $if root tbf rate $bw latency 50ms burst 1540";
}
elsif (!$bw && ($lt || $jt)) {
    # Latency/jitter only, no bandwidth limits
    push @cmds, "tc qdisc add dev $if root netem delay $lt $jt";
}
elsif ($bw && ($lt || $jt)) {
    push @cmds, "tc qdisc add dev $if root handle 1:0 cbq avpkt 1000 bandwidth 10kbit";
    push @cmds,
        "tc class add dev $if parent 1:0 classid 1:1 "
        . "cbq rate $bw allot 1500 prio 5 bounded isolated"
        if $bw;
    push @cmds, "tc qdisc add dev $if parent 1:1 netem delay $lt $jt"
        if $lt || $jt;
}
if ($opts->{verbose}) {
    print join("\n  ", ("Commands:", @cmds));
    print "\n";
}

# Run it
if ($opts->{test}) {
    print "Test mode, commands not executed\n";
    exit 0;
}
die "*** Must be root\n" if $>;
my $first = 1;
foreach my $cmd (@cmds) {
    my $ret = system($cmd);
    next if $first && ($ret >> 8) == 2;    # 'qdisc del' will fail if nothing setup yet
    die "*** Failed to invoke command: $!\n\t$cmd\n" if $ret < 0;
    die "*** Command failed, xstat=" . ($ret >> 8) . "\n\t$cmd\n" if $ret;
    $first = 0;
}

exit 0;

__END__


=head1 NAME

tc-easy - Do some easy traffic control: bandwidth, latency, and jitter

=head1 SYNOPSIS

tc-easy [options] BW LT JT [interface]

   BW = Bandwidth limit, 0 for unlimited
   LT = Latency, 0 for no latency
   JT = Jitter, 0 for none
   All ommited (all 0) means to remove any restrictions.

If interface is omitted, the first global scope interface is used.

 Options:
   -h    --help          Usage summary
   -t    --test          Test mode; with -v shows the commands
   -v    --verbose       Verbose output

 Examples:
   tc-easy                  # with nothing, clears traffic shaping
   tc-easy 550kbit          # Bandwidth limited to 550,000 bits-per-second
   tc-easy 0 350ms 10ms     # Latency set to 350msec with 10msec jitter
   tc-easy 1Mbps 0 0 eth3   # Bandwith to 1M bits-per-seconds on eth3

=head1 DESCRIPTION

This script wraps the Linux 'tc' command to do a few easy things;
namely limit the bandwidth, latency, and jitter on an interface.

Note: To show existing settings, use the 'tc' command as is like so:

  tc -s qdisc ls dev $INTERFACE

=head1 COPYRIGHT

MIT License

Copyright (c) 2017 Uncle Spook Software
https://github.com/spook/tc-easy

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=cut

